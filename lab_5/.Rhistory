neis
neis = c(1, 2, 1, 3, 0, 1, 4, 3, 2, 1)
len(neis)
neis.len
length(neis)
for (i in 0:length(neis)) {
print(i)
}
for (i in 1:length(neis)-1) {
print(i)
}
for (i in length(neis)) {
print(i)
}
for (i in 1:length(neis)) {
print(i)
}
neis$1
neis[1]
neis[2]
neis[0]
"axb" + 1 + ".txt"
paste("abc", str(1), sep="")
paste("abc", str(5), sep="")
paste("abc", 5, sep="")
neis = c(1, 2, 1, 3, 0, 1, 4, 3, 2, 1)
for (i in 1:length(neis)) {
net <- sample_smallworld(dim=1, size=10, nei=neis[i], p=0.1)
plot(net, vertex.size=6, vertex.label=NA, layout=layout_in_circle)
path <- paste("./generated_network/sw", neis[i], ".txt", sep ="")
write_graph(net, path, "edgelist")
}
neis = c(1, 2, 1, 3, 0, 1, 4, 3, 2, 1)
for (i in 1:length(neis)) {
net <- sample_smallworld(dim=1, size=10, nei=neis[i], p=0.1)
plot(net, vertex.size=6, vertex.label=NA, layout=layout_in_circle)
path <- paste("./generated_network/sw", i, ".txt", sep ="")
write_graph(net, path, "edgelist")
}
par(mfcol=c(2,2))
nlist<-replicate(4,list(network(matrix(rbinom(16,5,0.1),ncol=4,nrow=4))))
x <- list()
x.append(net)
list.append(x, net)
library(rlist)
install.packages('rlist')
library(rlist)
list.append(x, net)
neis = c(1, 2, 1, 3, 0, 1, 4, 3, 2, 1)
networks = list()
for (i in 1:length(neis)) {
net <- sample_smallworld(dim=1, size=10, nei=neis[i], p=0.1)
plot(net, vertex.size=6, vertex.label=NA, layout=layout_in_circle)
list.append(networks, net)
path <- paste("./generated_network/sw", i, ".txt", sep ="")
write_graph(net, path, "edgelist")
}
par(mfcol=c(1,1))
dnet<-networkDynamic(network.list=networks)
tDegree(dnet)
?networkDynamic
nlist<-replicate(4,list(network(matrix(rbinom(16,5,0.1),ncol=4,nrow=4))))
networks = list()
for (i in 1:length(neis)) {
net <- sample_smallworld(dim=1, size=10, nei=neis[i], p=0.1)
plot(net, vertex.size=6, vertex.label=NA, layout=layout_in_circle)
list.append(networks, net)
path <- paste("./generated_network/sw", i, ".txt", sep ="")
write_graph(net, path, "edgelist")
}
View(networks)
neis = c(1, 2, 1, 3, 0, 1, 4, 3, 2, 1)
networks = list()
for (i in 1:length(neis)) {
net <- sample_smallworld(dim=1, size=10, nei=neis[i], p=0.1)
plot(net, vertex.size=6, vertex.label=NA, layout=layout_in_circle)
networks <- list.append(networks, net)
path <- paste("./generated_network/sw", i, ".txt", sep ="")
write_graph(net, path, "edgelist")
}
# network dynamics
dnet<-networkDynamic(network.list=networks)
network(matrix(rbinom(16,5,0.1),ncol=4,nrow=4))
sample_smallworld(dim=1, size=10, nei=1, p=0.1)
?sample_smallworld
?network
x <- sample_smallworld(dim=1, size=10, nei=1, p=0.1)
x
?smallworld
as.network(x)
x
as.network.network(x)
as.network(x)
as.igraph(x)
is.igraph(x)
as.network(x)
as.network(x, 'edgelist')
as.network(x, 'edgelist')
x
get.adjacency(x)
network(get.adjacency(x))
neis = c(1, 2, 1, 3, 0, 1, 4, 3, 2, 1)
networks = list()
for (i in 1:length(neis)) {
net <- sample_smallworld(dim=1, size=10, nei=neis[i], p=0.1)
plot(net, vertex.size=6, vertex.label=NA, layout=layout_in_circle)
networks <- list.append(networks, network(get.adjacency(net)))
path <- paste("./generated_network/sw", i, ".txt", sep ="")
write_graph(net, path, "edgelist")
}
# network dynamics
dnet<-networkDynamic(network.list=networks)
tDegree(dnet)
compute.animation(
dnet,
animation.mode = "kamadakawai",
slice.par = list(
start = 1260,
end = 1300,
interval = 1,
aggregate.dur = 20,
rule = "any"
)
)
render.d3movie(
dnet,
displaylabels = FALSE
)
compute.animation(
dnet,
animation.mode = "kamadakawai",
slice.par = list(
start = 1,
end = 10,
interval = 1,
aggregate.dur = 20,
rule = "any"
)
)
render.d3movie(
dnet,
displaylabels = FALSE
)
compute.animation(
dnet,
animation.mode = "kamadakawai",
slice.par = list(
start = 1,
end = 10,
interval = 1,
aggregate.dur = 1,
rule = "any"
)
)
render.d3movie(
dnet,
displaylabels = FALSE
)
dnet[0]
dnet[0, 1]
dnet[0, 2]
dnet[0, 5]
?networkDynamic
?tPath
FwdPath <- tPath(
dnet,
v = 3,
direction = "fwd"
)
plotPaths(
dnet,
FwdPath,
displaylabels = FALSE,
vertex.col = "white"
)
BkwdPath <- tPath(
dnet,
v = 3,
direction = "bkwd",
type = 'latest.depart'
)
plotPaths(
dnet,
BkwdPath,
path.col = rgb(0, 97, 255, max=255, alpha=166),
displaylabels = FALSE,
edge.label.col = rgb(0,0,0,0),
vertex.col = "white"
)
# Slajd 13
BkwdPath <- tPath(
dnet,
v = c(1, 2),
direction = "bkwd",
type = 'latest.depart'
)
plotPaths(
dnet,
BkwdPath,
path.col = rgb(0, 97, 255, max=255, alpha=166),
displaylabels = FALSE,
edge.label.col = rgb(0,0,0,0),
vertex.col = "white"
)
# Slajd 13
BkwdPath <- tPath(
dnet,
v = 3,
direction = "bkwd",
type = 'latest.depart'
)
plotPaths(
dnet,
BkwdPath,
path.col = rgb(0, 97, 255, max=255, alpha=166),
displaylabels = FALSE,
edge.label.col = rgb(0,0,0,0),
vertex.col = "white"
)
FwdPath <- tPath(
dnet,
v = 3,
direction = "fwd"
)
plotPaths(
dnet,
FwdPath,
displaylabels = FALSE,
vertex.col = "white"
)
FwdPath <- tPath(
dnet,
v = 19,
direction = "fwd"
)
plotPaths(
dnet,
FwdPath,
displaylabels = FALSE,
vertex.col = "white"
)
?tPath
FwdPath <- tPath(
dnet,
v = 100,
direction = "fwd"
)
plotPaths(
dnet,
FwdPath,
displaylabels = FALSE,
vertex.col = "white"
)
FwdPath <- tPath(
dnet,
v = 99,
direction = "fwd"
)
plotPaths(
dnet,
FwdPath,
displaylabels = FALSE,
vertex.col = "white"
)
# Dla wybranych węzłów z 1,5 i 10 dnia wyznaczyć ścieżki fwd, fwd & bkwd, bakwd i je zwizualizować
# Wizualizacja fwd
FwdPath <- tPath(
dnet,
v = 56,
direction = "fwd"
)
plotPaths(
dnet,
FwdPath,
displaylabels = FALSE,
vertex.col = "white"
)
# Dla wybranych węzłów z 1,5 i 10 dnia wyznaczyć ścieżki fwd, fwd & bkwd, bakwd i je zwizualizować
# Wizualizacja fwd
FwdPath <- tPath(
dnet,
v = 14,
direction = "fwd"
)
plotPaths(
dnet,
FwdPath,
displaylabels = FALSE,
vertex.col = "white"
)
# Dla wybranych węzłów z 1,5 i 10 dnia wyznaczyć ścieżki fwd, fwd & bkwd, bakwd i je zwizualizować
# Wizualizacja fwd
FwdPath <- tPath(
dnet,
v = 4,
direction = "fwd"
)
plotPaths(
dnet,
FwdPath,
displaylabels = FALSE,
vertex.col = "white"
)
# Wizualizacja fwd
FwdPath <- tPath(
dnet,
v = 1,
direction = "fwd"
)
plotPaths(
dnet,
FwdPath,
displaylabels = FALSE,
vertex.col = "white"
)
# Slajd 13
BkwdPath <- tPath(
dnet,
v = 1,
direction = "bkwd",
type = 'latest.depart'
)
plotPaths(
dnet,
BkwdPath,
path.col = rgb(0, 97, 255, max=255, alpha=166),
displaylabels = FALSE,
edge.label.col = rgb(0,0,0,0),
vertex.col = "white"
)
?fPath
?tPath
FwdPath <- tPath(dnet, v = 1,direction = "fwd", start=5)
plotPaths(dnet,FwdPath,displaylabels = FALSE,vertex.col = "white")
FwdPath <- tPath(dnet, v = 1,direction = "fwd", start=10)
plotPaths(dnet,FwdPath,displaylabels = FALSE,vertex.col = "white")
BkwdPath <- tPath(dnet,v = 1,direction = "bkwd",type ='latest.depart',start=10)
plotPaths(dnet,BkwdPath,path.col = rgb(0, 97, 255, max=255, alpha=166),displaylabels = FALSE,edge.label.col = rgb(0,0,0,0),vertex.col = "white")
FwdPath <- tPath(dnet, v = 1,direction = "fwd", start=9)
plotPaths(dnet,FwdPath,displaylabels = FALSE,vertex.col = "white")
BkwdPath <- tPath(dnet,v = 1,direction = "bkwd",type ='latest.depart',start=9)
plotPaths(dnet,BkwdPath,path.col = rgb(0, 97, 255, max=255, alpha=166),displaylabels = FALSE,edge.label.col = rgb(0,0,0,0),vertex.col = "white")
tDegree(dnet)
neis = c(1, 2, 1, 3, 0, 1, 4, 3, 2, 1, 0)
networks = list()
for (i in 1:length(neis)) {
net <- sample_smallworld(dim=1, size=10, nei=neis[i], p=0.1)
plot(net, vertex.size=6, vertex.label=NA, layout=layout_in_circle)
networks <- list.append(networks, network(get.adjacency(net)))
path <- paste("./generated_network/sw", i, ".txt", sep ="")
write_graph(net, path, "edgelist")
}
# network dynamics
dnet<-networkDynamic(network.list=networks)
tDegree(dnet)
neis = c(1, 2, 1, 3, 0, 1, 4, 3, 2, 1)
networks = list()
for (i in 1:length(neis)) {
net <- sample_smallworld(dim=1, size=10, nei=neis[i], p=0.1)
plot(net, vertex.size=6, vertex.label=NA, layout=layout_in_circle)
networks <- list.append(networks, network(get.adjacency(net)))
path <- paste("./generated_network/sw", i, ".txt", sep ="")
write_graph(net, path, "edgelist")
}
# Wyznaczyć temporal degree dla 5 węzłów w różnych momentach czasu
tDegree(dnet)
tDegree(dnet)[10]
tDegree(dnet)[1]
tDegree(dnet)[2]
tDegree(dnet)[3]
# TODO
tDegree(dnet)
?tDegree
neis = c(1, 2, 1, 3, 0, 1, 4, 3, 2, 1)
networks = list()
for (i in 1:length(neis)) {
net <- sample_smallworld(dim=1, size=10, nei=neis[i], p=0.1)
plot(net, vertex.size=6, vertex.label=NA, layout=layout_in_circle)
networks <- list.append(networks, network(get.adjacency(net)))
path <- paste("./generated_network/sw", i, ".txt", sep ="")
write_graph(net, path, "edgelist")
}
# network dynamics
dnet<-networkDynamic(network.list=networks)
tDegree(dnet)
tDegree
tDegree(dnet)
type(tDegree(dnet))
typeof(tDegree(dnet))
degree = tDegree(dnet)
degree[0, 1]
degree[1, 1]
degree[1, 2]
degree[1, 3]
degree[1, 4]
degree[2, 4]
degree[3, 4]
degree[1:5, 4]
degree[1:5, :]
degree[1:5]
?networkDynamic
dynamicBetweenness <- tSnaStats(
tn,
snafun = "centralization",
start = 1,
end = 10,
time.interval = 1,
aggregate.dur = 20,
FUN = "betweenness"
)
plot(dynamicBetweenness)
# Betweenness
dynamicBetweenness <- tSnaStats(
dnet,
snafun = "centralization",
start = 1,
end = 10,
time.interval = 1,
aggregate.dur = 1,
FUN = "betweenness"
)
plot(dynamicBetweenness)
bar(dynamicBetweenness)
barplot(dynamicBetweenness)
plot(dynamicBetweenness)
network.collapse(dnet, at = 1)
for (i in c(1:10)) {
net <- network.collapse(dnet, at=i)
plot(net)
}
for (i in c(1:10)) {
print(i)
net <- network.collapse(dnet, at=i)
plot(net)
}
for (i in c(1:10)) {
print(i)
net <- network.collapse(dnet, at=i)
plot(net)
}
for (i in c(0:9)) {
print(i)
net <- network.collapse(dnet, at=i)
plot(net)
}
betweenness(network.collapse(dnet, at=1))
barplot(betweenness(network.collapse(dnet, at=1)))
for (i in c(0:9)) {
path <- paste("./output/betweenness_", i, ".pdf", sep ="")
pdf(file=path)
barplot(betweenness(network.collapse(dnet, at=i)))
dev.off()
}
df <- read.table("CollegeMsg.txt", sep=" ", header = FALSE)
df
df$V3
as.POSIXct(df$V3, origin="1970-01-01")
df$V3 = as.POSIXct(df$V3, origin="1970-01-01")
df
df$V3 = as.Date(as.POSIXct(df$V3, origin="1970-01-01"))
df$V3 = as.POSIXct(df$V3, origin="1970-01-01")
df
df$V3
months(df$V3)
df$month = months(df$V3)
df
max(df$V3)
min(df$V3)
max(df$V3)
as.data.frame(dnet)
FwdPath <- tPath(dnet, v = 1,direction = "fwd", start=1)
plotPaths(dnet,FwdPath,displaylabels = FALSE,vertex.col = "white")
BkwdPath <- tPath(dnet,v = 1,direction = "bkwd",type ='latest.depart',start=1)
plotPaths(dnet,BkwdPath,path.col = rgb(0, 97, 255, max=255, alpha=166),displaylabels = FALSE,edge.label.col = rgb(0,0,0,0),vertex.col = "white")
FwdPath <- tPath(dnet, v = 1,direction = "fwd", start=5)
plotPaths(dnet,FwdPath,displaylabels = FALSE,vertex.col = "white")
BkwdPath <- tPath(dnet,v = 1,direction = "bkwd",type ='latest.depart',start=5)
plotPaths(dnet,BkwdPath,path.col = rgb(0, 97, 255, max=255, alpha=166),displaylabels = FALSE,edge.label.col = rgb(0,0,0,0),vertex.col = "white")
FwdPath <- tPath(dnet, v = 1,direction = "fwd", start=10)
plotPaths(dnet,FwdPath,displaylabels = FALSE,vertex.col = "white")
BkwdPath <- tPath(dnet,v = 1,direction = "bkwd",type ='latest.depart',start=10)
plotPaths(dnet,BkwdPath,path.col = rgb(0, 97, 255, max=255, alpha=166),displaylabels = FALSE,edge.label.col = rgb(0,0,0,0),vertex.col = "white")
FwdPath <- tPath(dnet, v = 1,direction = "fwd", start=1)
plotPaths(dnet,FwdPath,displaylabels = FALSE,vertex.col = "white")
BkwdPath <- tPath(dnet,v = 1,direction = "bkwd",type ='latest.depart',start=1)
plotPaths(dnet,BkwdPath,path.col = rgb(0, 97, 255, max=255, alpha=166),displaylabels = FALSE,edge.label.col = rgb(0,0,0,0),vertex.col = "white")
FwdPath <- tPath(dnet, v = 1,direction = "fwd", start=5)
plotPaths(dnet,FwdPath,displaylabels = FALSE,vertex.col = "white")
BkwdPath <- tPath(dnet,v = 1,direction = "bkwd",type ='latest.depart',start=5)
plotPaths(dnet,BkwdPath,path.col = rgb(0, 97, 255, max=255, alpha=166),displaylabels = FALSE,edge.label.col = rgb(0,0,0,0),vertex.col = "white")
FwdPath <- tPath(dnet, v = 1,direction = "fwd", start=10)
plotPaths(dnet,FwdPath,displaylabels = FALSE,vertex.col = "white")
BkwdPath <- tPath(dnet,v = 1,direction = "bkwd",type ='latest.depart',start=10)
plotPaths(dnet,BkwdPath,path.col = rgb(0, 97, 255, max=255, alpha=166),displaylabels = FALSE,edge.label.col = rgb(0,0,0,0),vertex.col = "white")
tDegree(dnet)
dynamicBetweenness <- tSnaStats(
dnet,
snafun = "centralization",
start = 1,
end = 10,
time.interval = 1,
aggregate.dur = 1,
FUN = "betweenness"
)
plot(dynamicBetweenness)
for (i in c(0:9)) {
path <- paste("./output/betweenness_", i, ".pdf", sep ="")
pdf(file=path)
barplot(betweenness(network.collapse(dnet, at=i)))
dev.off()
}
df
