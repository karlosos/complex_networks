# percentage of neighbors of U3 who are also co-workers
relevance_ml(net,"U3","work")
# redundancy between work and lunch
connective_redundancy_ml(net,"U3",c("work","lunch"))
# percentage of neighbors of U3 who would no longer
# be neighbors by removing this layer
xrelevance_ml(net,"U3","work")
net <- ml_aucs()
attributes_ml(net)
# actor attributes, of string type (default)
add_attributes_ml(net,c("name","surname"))
# attributes for vertices on the facebook layer
add_attributes_ml(net,"username",type="string",target="vertex",layer="facebook")
# attributes for edges on the work layer
add_attributes_ml(net,"strength",type="numeric",target="edge",layer="work")
# listing the attributes
attributes_ml(net)
# setting some values for the newly created attributes
set_values_ml(net,"name",actors=c("U54","U139"),values=c("John","Johanna"))
e <- data.frame(
c("U139","U139"),
c("work","work"),
c("U71","U97"),
c("work","work"))
set_values_ml(net,"strength",edges=e,values=.47)
get_values_ml(net,"name",actors=c("U139"))
get_values_ml(net,"strength",edges=e)
# setting attributes based on network properties: create a "degree"
# attribute and set its value to the degree of each actor
actors_ml(net) -> a
layers_ml(net) -> l
degree_ml(net,actors=a,layers=l,mode="all") -> d
add_attributes_ml(net,target="actor",type="numeric",attributes="degree")
set_values_ml(net,attribute="degree",actors=a,values=d)
get_values_ml(net,attribute="degree",actors="U54")
# select actors based on attribute values (e.g., with degree greater than 40)
get_values_ml(net,attribute="degree",actors=a) -> degrees
a[degrees>40]
# list all the attributes
attributes_ml(net)
abacus_ml(net, min.actors=3, min.layers=1)
clique_percolation_ml(net, k=3, m=1)
glouvain_ml(net, gamma=1, omega=1, limit=0)
infomap_ml(net, overlapping=FALSE, directed=FALSE, self.links=TRUE)
modularity_ml(net, comm.struct, gamma=1, omega=1)
get_community_list_ml(comm.struct, net)
net <- ml_aucs()
abacus_ml(net)
clique_percolation_ml(net)
glouvain_ml(net)
infomap_ml(net)
library(igraph)
# Konwersja do sieci single layer
net <- ml_aucs()
# using the default merge.actors=TRUE we create a multigraph,
# where each actor corresponds to a vertex in the result
multigraph <- as.igraph(net)
# this is a simple graph corresponding to the facebook layer
facebook1 <- as.igraph(net, "facebook")
# this includes also the actors without a facebook account
facebook2 <- as.igraph(net, "facebook", all.actors=TRUE)
# two layers are converted to an igraph object, where two
# vertices are used for each actor: one corresponding to the
# vertex on facebook, one to the vertex on lunch
f_l_net <- as.igraph(net, c("facebook","lunch"),merge.actors=FALSE)
distance_ml(net, from, to=character(0), method="multiplex")
net <- ml_aucs()
distance_ml(net,"U54","U3")
distance_ml(net, from=character(1), to=character(0), method="multiplex")
net <- ml_aucs()
distance_ml(net,"U54","U3")
# Odleglosci w sieciach multilayer
distance_ml(net, from='U54', to=character(0), method="multiplex")
net <- ml_aucs()
distance_ml(net,"U54","U3")
file <- tempfile("aucs.mpx") # zapis do R /….. / multinet/extdata
net <- ml_aucs()
write_ml(net,file)
net1 <- read_ml(file,"AUCS")
net1
# Slajd 12
# Tworzenie sieci wielowarstwowej
net <- ml_empty()
# Adding some layers
add_layers_ml(net,"l1")
add_layers_ml(net,c("l2","l3"),c(TRUE,FALSE))
layers_ml(net)
# Adding some vertices (actor A3 is not present in layer l3: no corresponding vertex there)
vertices <- data.frame(
c("A1","A2","A3","A1","A2","A3"),
c("l1","l1","l1","l2","l2","l2"))
add_vertices_ml(net,vertices)
vertices <- data.frame(
c("A1","A2"),
c("l3","l3"))
add_vertices_ml(net,vertices)
vertices_ml(net)
# Slajd 13
# Verifying that the actors have been added correctly
num_actors_ml(net)
actors_ml(net)
# We create a data frame specifying two edges:
# A2,l2 -- A3,l1
# A2,l2 -- A3,l2
edges <- data.frame(
c("A2","A2"),
c("l2","l2"),
c("A3","A3"),
c("l1","l2"))
add_edges_ml(net,edges)
edges_ml(net)
# The following deletes layer 1, and also deletes
# all vertices from "l1" and the edge with an end-point in "l1"
delete_layers_ml(net,"l1")
# The following also deletes the vertices associated to
# "A1" in layers "l2" and "l3"
delete_actors_ml(net,"A1")
# deleting vertex A2,l3 and edge A2,l2 -- A3,l2
delete_vertices_ml(net,data.frame("A2","l3"))
edges <- data.frame("A2","l2","A3","l2")
delete_edges_ml(net,edges)
net
# we generate a network with two layers, one growing according
# to the Preferential Attachment model and one growing by selecting
# new edges uniformly at random.
models <- c(evolution_pa_ml(3,1), evolution_er_ml(50))
# all the probability vectors must have the same number of
# fields, one for each layer: two in this example
# by defining pr.internal and pr.external, we are also implicitely defining
# pr.no.action (1 minus the other probabilities, for each field/layer).
pr_external <- c(.5,0)
pr_internal <- c(.5,.5)
# each layer will import edges from the other if needed
# (not the second layer in this example: it has 0 probability of external events)
dependency <- matrix(c(0,1,1,0),2,2)
# 100 steps of network growing, adding actors from a pool of 100
grow_ml(100, 100, models, pr_internal, pr_external, dependency)
layer_summary_ml(net, layer, method = " sum.degree", mode = "all")
layer_comparison_ml(net, layers = character(0), method = " sum.degree", mode = "all", K = 0)
layer_comparison_ml(net,method="kulczynski2.actors")
layer_comparison_ml(net,method="kulczynski2.edges")
layer_comparison_ml(net,method="kulczynski2.triangles")
layer_comparison_ml(net,method="hamann.actors")
layer_comparison_ml(net,method="hamann.edges")
layer_comparison_ml(net,method="hamann.triangles")
# comparison of degree distributions (divergences)
layer_comparison_ml(net,method="dissimilarity.degree")
layer_comparison_ml(net,method="KL.degree")
layer_comparison_ml(net,method="jeffrey.degree")
# statistical degree correlation
layer_comparison_ml(net,method="pearson.degree")
layer_comparison_ml(net,method="rho.degree")
layout_multiforce_ml(n, w_in = 1, w_inter = 1, gravity = 0, iterations = 100)
layout_circular_ml(n)
net <- ml_florentine()
layout_multiforce_ml(net)
l <- layout_circular_ml(net)
plot(net,layout=l)
net <- ml_aucs()
layout_multiforce_ml(net)
l <- layout_circular_ml(net)
plot(net,layout=l)
net <- ml_florentine()
plot(net)
c <- clique_percolation_ml(net)
plot(net, vertex.labels.cex=.5, com=c)
net <- ml_aucs()
plot(net, vertex.labels=NA)
title("AUCS network")
values2graphics(c("a", "b", "b", "c"))
ml_empty(name="unnamed")
ml_aucs()
ml_bankwiring()
ml_florentine()
ml_monastery()
ml_tailorshop()
ml_toy()
# Slajd 12
# Tworzenie sieci wielowarstwowej
net <- ml_empty()
# Adding some layers
add_layers_ml(net,"l1")
add_layers_ml(net,c("l2","l3"),c(TRUE,FALSE))
layers_ml(net)
# Adding some vertices (actor A3 is not present in layer l3: no corresponding vertex there)
vertices <- data.frame(
c("A1","A2","A3","A1","A2","A3"),
c("l1","l1","l1","l2","l2","l2"))
add_vertices_ml(net,vertices)
vertices <- data.frame(
c("A1","A2"),
c("l3","l3"))
add_vertices_ml(net,vertices)
vertices_ml(net)
?add_igraph_layer_ml
ws <- sample_smallworld(dim=1, size=10, nei=1, p=0.1)
net <- ml_empty()
ws <- sample_smallworld(dim=1, size=10, nei=1, p=0.1)
add_igraph_layer_ml(net, ws, 'l1')
ws
ws <- sample_smallworld(dim=1, size=10, nei=1, p=0.1)
add_igraph_layer_ml(net, ws, 'l1')
ws <- sample_smallworld(dim=1, size=10, nei=1, p=0.1)
set_vertex_attr(ws, "name", value = LETTERS[1:10])
add_igraph_layer_ml(net, ws, 'l1')
ws
ws <- sample_smallworld(dim=1, size=10, nei=1, p=0.1)
ws <- set_vertex_attr(ws, "name", value = LETTERS[1:10])
add_igraph_layer_ml(net, ws, 'l1')
ws
net
?sample_smallworld
net1 <- ml_empty()
ws1_1 <- sample_smallworld(dim=1, size=10, nei=1, p=0.1)
ws1_1 <- set_vertex_attr(ws1_1, "name", value = LETTERS[1:10])
add_igraph_layer_ml(net1, ws1_1, 'l1')
ws1_2 <- sample_smallworld(dim=1, size=10, nei=1, p=0.1)
ws1_2 <- set_vertex_attr(ws1_2, "name", value = LETTERS[1:10])
add_igraph_layer_ml(net1, ws1_2, 'l2')
net1 <- ml_empty()
ws1_1 <- sample_smallworld(dim=1, size=10, nei=1, p=0.1)
ws1_1 <- set_vertex_attr(ws1_1, "name", value = LETTERS[1:10])
add_igraph_layer_ml(net1, ws1_1, 'l1')
ws1_2 <- sample_smallworld(dim=1, size=10, nei=1, p=0.1)
ws1_2 <- set_vertex_attr(ws1_2, "name", value = LETTERS[1:10])
add_igraph_layer_ml(net1, ws1_2, 'l2')
plot(net1, vertex.labels=NA)
# Siec 2 różne rewiring probabilities
net2 <- ml_empty()
ws2_1 <- sample_smallworld(dim=1, size=10, nei=1, p=0.1)
ws2_1 <- set_vertex_attr(ws2_1, "name", value = LETTERS[1:10])
add_igraph_layer_ml(net1, ws2_1, 'l1')
ws2_2 <- sample_smallworld(dim=1, size=10, nei=1, p=0.5)
ws2_2 <- set_vertex_attr(ws2_2, "name", value = LETTERS[1:10])
add_igraph_layer_ml(net1, ws2_2, 'l2')
plot(net2, vertex.labels=NA)
# Siec 2 różne rewiring probabilities
net2 <- ml_empty()
ws2_1 <- sample_smallworld(dim=1, size=10, nei=1, p=0.1)
ws2_1 <- set_vertex_attr(ws2_1, "name", value = LETTERS[1:10])
add_igraph_layer_ml(net2, ws2_1, 'l1')
ws2_2 <- sample_smallworld(dim=1, size=10, nei=1, p=0.3)
ws2_2 <- set_vertex_attr(ws2_2, "name", value = LETTERS[1:10])
add_igraph_layer_ml(net2, ws2_2, 'l2')
plot(net2, vertex.labels=NA)
# Siec 2 różne rewiring probabilities
net2 <- ml_empty()
ws2_1 <- sample_smallworld(dim=1, size=10, nei=1, p=0.1)
ws2_1 <- set_vertex_attr(ws2_1, "name", value = LETTERS[1:10])
add_igraph_layer_ml(net2, ws2_1, 'l1')
ws2_2 <- sample_smallworld(dim=1, size=10, nei=1, p=0.8)
ws2_2 <- set_vertex_attr(ws2_2, "name", value = LETTERS[1:10])
add_igraph_layer_ml(net2, ws2_2, 'l2')
plot(net2, vertex.labels=NA)
LETTERS[2]
edges <- data.frame(
c("A","A"),
c("l1","l2"),
c("B","C"),
c("l1","l2"))
add_edges_ml(net1,edges)
plot(net1)
sample.int(100, 10)
sample.int(10, 1)
sample.int(10, 1)
sample.int(10, 1)
sample.int(10, 1)
sample.int(10, 1)
sample.int(10, 1)
sample.int(10, 1)
sample.int(10, 1)
sample.int(10, 1)
sample.int(10, 1)
# Wprowadzanie polaczen miedzywarstwami
edges <- data.frame(
c(LETTERS[sample.int(10, 1)],LETTERS[sample.int(10, 1)]),
c("l1","l2"))
sample.int(10, 1)edges
eshes
edges
add_edges_ml(net1,edges)
plot(net1)
# Wprowadzanie polaczen miedzywarstwami
edges <- data.frame(
c(LETTERS[sample.int(10, 1)]),
c("l1"),
c(LETTERS[sample.int(10, 1)]),
c("l2"))
edges
add_edges_ml(net1,edges)
plot(net1)
LETTERS[sample.int(10, 5)]
# Wprowadzanie polaczen miedzywarstwami
edges <- data.frame(
c(LETTERS[sample.int(10, 5)]),
c(rep("l1", 5)),
c(LETTERS[sample.int(10, 5)]),
c(rep("l2", 5)))
edges
add_edges_ml(net1,edges)
plot(net1)
# Wprowadzanie 5 polaczen miedzywarstwami
addInterLayersEdges <- function(net, num) {
edges <- data.frame(
c(LETTERS[sample.int(10, num)]),
c(rep("l1", num)),
c(LETTERS[sample.int(10, num)]),
c(rep("l2", num)))
edges
add_edges_ml(net,edges)
}
# Siec 2 różne rewiring probabilities
net2 <- ml_empty()
ws2_1 <- sample_smallworld(dim=1, size=10, nei=1, p=0.1)
ws2_1 <- set_vertex_attr(ws2_1, "name", value = LETTERS[1:10])
add_igraph_layer_ml(net2, ws2_1, 'l1')
ws2_2 <- sample_smallworld(dim=1, size=10, nei=1, p=0.8)
ws2_2 <- set_vertex_attr(ws2_2, "name", value = LETTERS[1:10])
add_igraph_layer_ml(net2, ws2_2, 'l2')
plot(net2, vertex.labels=NA)
addInterLayersEdges(net2, 2)
plot(net2)
net <- addInterLayersEdges(net2, 2)
plot(net)
# Wprowadzanie 5 polaczen miedzywarstwami
addInterLayersEdges <- function(net, num) {
new_net <- copy(net)
edges <- data.frame(
c(LETTERS[sample.int(10, num)]),
c(rep("l1", num)),
c(LETTERS[sample.int(10, num)]),
c(rep("l2", num)))
edges
add_edges_ml(new_net, edges)
return(new_net)
}
net <- addInterLayersEdges(net2, 2)
net1 <- createML(ws1_1, ws1_2)
plot(net1)
addInterLayersEdges(net1, 5)
plot(net1)
# Tworzenie sieci
createML <- function(ws1, ws2) {
net <- ml_empty()
add_igraph_layer_ml(net, ws1, 'l1')
add_igraph_layer_ml(net, ws1, 'l2')
return(net)
}
net1 <- createML(ws1_1, ws1_2)
plot(net1)
addInterLayersEdges(net1, 5)
plot(net1)
# Wprowadzanie 5 polaczen miedzywarstwami
addInterLayersEdges <- function(net, num) {
edges <- data.frame(
c(LETTERS[sample.int(10, num)]),
c(rep("l1", num)),
c(LETTERS[sample.int(10, num)]),
c(rep("l2", num)))
edges
add_edges_ml(new_net, edges)
}
net1 <- createML(ws1_1, ws1_2)
plot(net1)
addInterLayersEdges(net1, 5)
plot(net1)
# Wprowadzanie 5 polaczen miedzywarstwami
addInterLayersEdges <- function(net, num) {
edges <- data.frame(
c(LETTERS[sample.int(10, num)]),
c(rep("l1", num)),
c(LETTERS[sample.int(10, num)]),
c(rep("l2", num)))
edges
add_edges_ml(net, edges)
}
net1 <- createML(ws1_1, ws1_2)
plot(net1)
addInterLayersEdges(net1, 5)
plot(net1)
net2 <- createML(ws2_1, ws2_2)
plot(net2)
addInterLayersEdges(net2, 5)
plot(net2)
# Wyznaczenie i porownanie dwoch podstawowych miar sieciowych w ujeciu wielowarstwowym
degree_ml(net1)
degree_ml(net2)
layer_comparison_ml(net1,method="kulczynski2.actors")
layer_comparison_ml(net1,method="kulczynski2.edges")
layer_comparison_ml(net1,method="kulczynski2.triangles")
layer_comparison_ml(net2,method="kulczynski2.actors")
layer_comparison_ml(net2,method="kulczynski2.edges")
layer_comparison_ml(net2,method="kulczynski2.triangles")
layer_comparison_ml(net1,method="dissimilarity.degree")
layer_comparison_ml(net1,method="KL.degree")
layer_comparison_ml(net1,method="jeffrey.degree")
# Porownanie spolecznosci
clique_percolation_ml(net1)
# Porownanie spolecznosci
comm <- clique_percolation_ml(net1)
modularity_ml(net, comm.struct, gamma=1, omega=1)
# Porownanie spolecznosci
comm <- clique_percolation_ml(net1)
modularity_ml(net1, comm, gamma=1, omega=1)
# Porownanie spolecznosci
comm <- clique_percolation_ml(net1)
modularity_ml(net1, comm, gamma=1, omega=1)
comm <- clique_percolation_ml(net2)
modularity_ml(net2, comm, gamma=1, omega=1)
net2 <- createML(ws2_1, ws2_2)
plot(net2)
addInterLayersEdges(net2, 5)
plot(net2)
# Porownanie spolecznosci
comm <- clique_percolation_ml(net1)
modularity_ml(net1, comm, gamma=1, omega=1)
comm <- clique_percolation_ml(net2)
modularity_ml(net2, comm, gamma=1, omega=1)
comm <- clique_percolation_ml(net1)
length(comm)
modularity_ml(net1, comm, gamma=1, omega=1)
comm <- clique_percolation_ml(net2)
length(comm)
modularity_ml(net2, comm, gamma=1, omega=1)
net1 <- createML(ws1_1, ws1_2)
plot(net1)
addInterLayersEdges(net1, 20)
plot(net1)
net2 <- createML(ws2_1, ws2_2)
plot(net2)
addInterLayersEdges(net2, 20)
plot(net2)
# Wyznaczenie i porownanie dwoch podstawowych miar sieciowych w ujeciu wielowarstwowym
degree_ml(net1)
degree_ml(net2)
# Podobienstwo warstw
layer_comparison_ml(net1,method="kulczynski2.actors")
layer_comparison_ml(net1,method="kulczynski2.edges")
layer_comparison_ml(net1,method="kulczynski2.triangles")
layer_comparison_ml(net1,method="dissimilarity.degree")
layer_comparison_ml(net1,method="KL.degree")
layer_comparison_ml(net1,method="jeffrey.degree")
# Porownanie spolecznosci
comm <- clique_percolation_ml(net1)
length(comm)
modularity_ml(net1, comm, gamma=1, omega=1)
comm <- clique_percolation_ml(net2)
length(comm)
modularity_ml(net2, comm, gamma=1, omega=1)
sample.int(10, 12)
sample.int(10, 12, replace=True)
sample.int(10, 12, replace=TRUE)
# Wprowadzanie 5 polaczen miedzywarstwami
addInterLayersEdges <- function(net, num) {
edges <- data.frame(
c(LETTERS[sample.int(10, num, replace=TRUE)]),
c(rep("l1", num)),
c(LETTERS[sample.int(10, num, replace=TRUE)]),
c(rep("l2", num)))
edges
add_edges_ml(net, edges)
}
net1 <- createML(ws1_1, ws1_2)
plot(net1)
addInterLayersEdges(net1, 20)
plot(net1)
net2 <- createML(ws2_1, ws2_2)
plot(net2)
addInterLayersEdges(net2, 20)
plot(net2)
# Wyznaczenie i porownanie dwoch podstawowych miar sieciowych w ujeciu wielowarstwowym
degree_ml(net1)
degree_ml(net2)
# Podobienstwo warstw
layer_comparison_ml(net1,method="kulczynski2.actors")
layer_comparison_ml(net1,method="kulczynski2.edges")
layer_comparison_ml(net1,method="kulczynski2.triangles")
layer_comparison_ml(net1,method="dissimilarity.degree")
layer_comparison_ml(net1,method="KL.degree")
layer_comparison_ml(net1,method="jeffrey.degree")
# Porownanie spolecznosci
comm <- clique_percolation_ml(net1)
length(comm)
modularity_ml(net1, comm, gamma=1, omega=1)
comm <- clique_percolation_ml(net2)
length(comm)
modularity_ml(net2, comm, gamma=1, omega=1)
net1 <- createML(ws1_1, ws1_2)
plot(net1)
addInterLayersEdges(net1, 20)
plot(net1)
net2 <- createML(ws2_1, ws2_2)
plot(net2)
addInterLayersEdges(net2, 20)
plot(net2)
# Wyznaczenie i porownanie dwoch podstawowych miar sieciowych w ujeciu wielowarstwowym
degree_ml(net1)
degree_ml(net2)
# Podobienstwo warstw
layer_comparison_ml(net1,method="kulczynski2.actors")
layer_comparison_ml(net1,method="kulczynski2.edges")
layer_comparison_ml(net1,method="kulczynski2.triangles")
layer_comparison_ml(net1,method="dissimilarity.degree")
layer_comparison_ml(net1,method="KL.degree")
layer_comparison_ml(net1,method="jeffrey.degree")
# Porownanie spolecznosci
comm <- clique_percolation_ml(net1)
length(comm)
modularity_ml(net1, comm, gamma=1, omega=1)
comm <- clique_percolation_ml(net2)
length(comm)
modularity_ml(net2, comm, gamma=1, omega=1)
