setwd("C:/Dev/complex_networks/lab_3/")
## Wizualizacja
df <- read.table("data/reachability.txt", sep = " ", header = FALSE)
graph <- graph.data.frame(df, directed = TRUE)
/plot(graph)
# Srednica w grafie nieskierowanym
d = diameter(graph, directed=F, weights=NA)
# Srednia najkrotsza sciezka dla grafu nieskierowanego
average.path.length(graph)
# Srednica sieci w grafie skierowanym
diameter(graph, directed=T, weight=NA)
get.diameter(graph, directed = TRUE)
# Srednia najkrotsza sciezka dla grafu skierowanego
average.path.length(graph, directed = TRUE)
setwd("C:/Dev/complex_networks/lab_3/")
## Wizualizacja
df <- read.table("data/reachability.txt", sep = " ", header = FALSE)
graph <- graph.data.frame(df, directed = TRUE)
# plot(graph)
# Srednica w grafie nieskierowanym
d = diameter(graph, directed=F, weights=NA)
# Srednia najkrotsza sciezka dla grafu nieskierowanego
average.path.length(graph)
# Srednica sieci w grafie skierowanym
diameter(graph, directed=T, weight=NA)
get.diameter(graph, directed = TRUE)
# Srednia najkrotsza sciezka dla grafu skierowanego
average.path.length(graph, directed = TRUE)
setwd("C:/Dev/complex_networks/lab_3/")
df <- read.table("data/reachability.txt", sep = " ", header = FALSE)
graph <- graph.data.frame(df, directed = TRUE)
df <- read.table("data/reachability.txt", sep = " ", header = FALSE)
graph <- graph.data.frame(df)
library(igraph)
df <- read.table("data/reachability.txt", sep = " ", header = FALSE)
graph <- graph.data.frame(df)
d = diameter(graph, directed=F, weights=NA)
average.path.length(graph)
diameter(graph, directed=T, weight=NA)
get.diameter(graph, directed = TRUE)
average.path.length(graph, directed = TRUE)
setwd("C:/Dev/complex_networks/lab_3/")
library(igraph)
## Wizualizacja
graph <- read.graph("data/reachability", format="edgelist")
## Wizualizacja
graph <- read.graph("data/reachability,txt", format="edgelist")
## Wizualizacja
graph <- read.graph("data/reachability.txt", format="edgelist")
df <- read.table("data/reachability.txt", sep = " ", header = FALSE)
graph <- graph.data.frame(df)
d = diameter(graph, directed=F, weights=NA)
average.path.length(graph)
average.path.length(graph, directed = TRUE)
hist(degree(graph))
hist(closeness(graph))
hist(betweenness(graph))
degree(graph)
View(graph)
degree(graph)
d = diameter(graph, directed=F, weights=NA)
get.diameter(graph, directed = TRUE)
# Srednia najkrotsza sciezka dla grafu skierowanego
average.path.length(graph, directed = TRUE)
# Rozklad degree
hist(degree(graph))
setwd("C:/Dev/complex_networks/lab_3/")
library(igraph)
## Wizualizacja
df <- read.table("data/reachability.txt", sep = " ", header = FALSE)
graph <- graph.data.frame(df)
# plot(graph)
# Srednica w grafie nieskierowanym
d = diameter(graph, directed = FALSE, weights=NA)
# Srednia najkrotsza sciezka dla grafu nieskierowanego
average.path.length(graph, directed = FALSE)
# Srednica sieci w grafie skierowanym
diameter(graph, directed=T, weight=NA)
get.diameter(graph, directed = TRUE)
# Srednia najkrotsza sciezka dla grafu skierowanego
average.path.length(graph, directed = TRUE)
# Rozklad degree
hist(degree(graph))
# Rozklad closeness
hist(closeness(graph))
# Rozklad betweenness
hist(betweenness(graph))
degree(graph)
graph(1)
plot(graph, vertex.label=as.numeric(V(graph)))
top_n(degree(graph))
install.packages("dplyr")
library(dplyr)
top_n(degree(graph))
top_n(degree(graph), 10)
degree(graph)
degree(graph)
degree[degree > quantile(degree,prob=1-n/100),]
degree(graph)
sort(degree(graph), decreasing = TRUE)[1:5]
degree(graph[1:5])
degree(graph)[1:5]
shortest.paths(graph, 246, 368, mode="out") # zamiast FROM TO numery wewzlow
shortest.paths(graph, 246, 368, mode="all") # zamiast FROM TO numery wewzlow
shortest.paths(graph, 246, 368, mode="in") # zamiast FROM TO numery wewzlow
shortest.paths(graph, 246, 368, mode="in", directed = TRUE) # zamiast FROM TO numery wewzlow
gl <- graph_from_literal(a-b-c-d-e-f, a-g-h-b, h-e:f:i, j)
plot(gl)
gl <- graph_from_literal(a-b-c-d-e-f, a-g-h-b, h-e:f:i)
degree(gl)
sort(degree(gl))
sort(degree(gl), decreasing = TRUE)
gl <- graph_from_literal(a-+b-c-d-e-f, a-g-h-b, h-e:f:i)
sort(degree(gl), decreasing = TRUE)
gl <- graph_from_literal(a-+b-c-d-e-f, a-g-h-b)
sort(degree(gl), decreasing = TRUE)
plot(gl)
gl <- graph_from_literal(a-+b+-c-d-e-f, a-g-h-b)
plot(gl)
sort(degree(gl), decreasing = TRUE)
gl <- graph_from_literal(a-+b+-c-+d-+e-+f, a+-+g+-+h+-b)
plot(gl)
sort(degree(gl), decreasing = TRUE)
shortest.paths(graph, 'b', 'g', mode="in") # zamiast FROM TO numery wewzlow
shortest.paths(gl, 'b', 'g', mode="in") # zamiast FROM TO numery wewzlow
shortest.paths(gl, 'g', 'b', mode="in") # zamiast FROM TO numery wewzlow
shortest.paths(gl, 'g', 'b', mode="out") # zamiast FROM TO numery wewzlow
shortest.paths(gl, 'g', 'c', mode="out") # zamiast FROM TO numery wewzlow
sort(closeness(graph), decreasing = TRUE)[1:5]
sort(betweenness(graph), decreasing = TRUE)[1:5]
sort(degree(graph), decreasing = TRUE)[1:5]
sort(closeness(graph), decreasing = TRUE)[1:5]
sort(betweenness(graph), decreasing = TRUE)[1:5]
sort(degree(graph), decreasing = TRUE)[1:5]
sort(closeness(graph), decreasing = TRUE)[1:5]
sort(betweenness(graph), decreasing = TRUE)[1:5]
shortest.paths(graph, 246, 368, mode="out") # zamiast FROM TO numery wewzlow
degree(graph)[1]
degree(graph)[1, 0]
degree(graph)[1][1]
degree(graph)[1]
degree(graph)[1:2]
degree(graph)[1]
sort(degree(graph), decreasing = TRUE)[1:5]
shortest.paths(graph, 246, 368, mode="out") # zamiast FROM TO numery wewzlow
shortest.paths(graph, 246, 230, mode="out") # zamiast FROM TO numery wewzlow
shortest.paths(graph, 246, 74, mode="out") # zamiast FROM TO numery wewzlow
shortest.paths(graph, 246, 94, mode="out") # zamiast FROM TO numery wewzlow
dg = sort(degree(graph), decreasing = TRUE)[1:5]
names(dg)
expand.grid(0:1, 0:1, 0:1)
expand.grid(0:1, 0:1)
expand.grid([1, 2, 3], [4, 5, 6])
expand.grid([1, 2, 3], [4, 5, 6])
shortest.paths(graph, 246, 368, mode="out") # zamiast FROM TO numery wewzlow
shortest.paths(graph, 246, 230, mode="out") # zamiast FROM TO numery wewzlow
shortest.paths(graph, 246, 74, mode="out") # zamiast FROM TO numery wewzlow
shortest.paths(graph, 246, 94, mode="out") # zamiast FROM TO numery wewzlow
shortest.paths(graph, c(246, 230), c(368, 94), mode="out") # zamiast FROM TO numery wewzlow
shortest.paths(graph, names(dg), names(dg), mode="out") # zamiast FROM TO numery wewzlow
dg = sort(degree(graph), decreasing = TRUE)[1:5]
names(dg) # nazwy wezlow
shortest.paths(graph, names(dg), names(dg), mode="out") # zamiast FROM TO numery wewzlow
dg = sort(degree(graph), decreasing = TRUE)[1:5]
shortest.paths(graph, names(dg), names(dg), mode="out")
cl = sort(closeness(graph), decreasing = TRUE)[1:5]
shortest.paths(graph, names(cl), names(cl), mode="out")
bt = sort(betweenness(graph), decreasing = TRUE)[1:5]
shortest.paths(graph, names(bt), names(bt), mode="out")
# Rozklad betweenness
hist(betweenness(graph))
dg = sort(degree(graph), decreasing = TRUE)[1:5]
shortest.paths(graph, names(dg), names(dg), mode="out")
cl = sort(closeness(graph), decreasing = TRUE)[1:5]
shortest.paths(graph, names(cl), names(cl), mode="out")
bt = sort(betweenness(graph), decreasing = TRUE)[1:5]
shortest.paths(graph, names(bt), names(bt), mode="out")
intersect(intersect(dg,cl),bt)
intersect(dg,cl)
intersect(intersect(names(dg),names(cl)),names(bt))
