setwd("C:/Dev/complex_networks/lab_3/")
library("igraph")
graph <- sample_gnm(n=30, m=30)
plot(graph, vertex.label=NA, vertex.size=18, vertex.label.cex = 1.3)
communities <- cluster_louvain(graph, weights = NULL)
# info zwrotne https://igraph.org/r/doc/communities.html
length(communities) # liczba społeczności
sizes(communities) # rozmiary społeczności
members <- membership(communities) #w tablicy dla każdego węzła przypisane jest community id
modularity(comminities)
crossing(communities, graph) # łączność pomiędzy społecznościami
communities <- cluster_louvain(graph, weights = NULL)
# info zwrotne https://igraph.org/r/doc/communities.html
length(communities) # liczba społeczności
sizes(communities) # rozmiary społeczności
members <- membership(communities) #w tablicy dla każdego węzła przypisane jest community id
modularity(communities)
crossing(communities, graph) # łączność pomiędzy społecznościami
compare(comm1, comm2, method = c("vi", "nmi", "split.join", "rand",
"adjusted.rand")) # porównanie
plot(communities, graph)
karate <- make_graph("Zachary")
fc <- cluster_fast_greedy(karate)
plot_dendrogram(fc)
plot(fc, karate)
# Inne algorytmy
# Random walk
fc <- cluster_walktrap(graph, weights = E(graph)$weight, steps = x, merges = TRUE, modularity = TRUE, membership =
TRUE)
plot_dendrogram(fc)
plot(fc, karate)
# Eigenvector
fc <- cluster_leading_eigen(graph, steps = -1, weights = NULL, start = NULL, options = arpack_defaults, callback = NULL,
extra = NULL, env = parent.frame())
plot_dendrogram(fc)
plot(fc, karate)
# Betweenness krawędzi
fc <- cluster_edge_betweenness(graph, weights = E(graph)$weight, directed = TRUE, edge.betweenness = TRUE, merges
= TRUE, bridges = TRUE, modularity = TRUE, membership = TRUE)
plot_dendrogram(fc)
plot(fc, karate)
# Etykiety & voting
fc <- cluster_label_prop(graph, weights = NULL, initial = NULL, fixed = NULL)
plot_dendrogram(fc)
plot(fc, karate)
# Greedy
fc <- cluster_fast_greedy
plot_dendrogram(fc)
plot(fc, karate)
# Greedy
fc <- cluster_fast_greedy(graph)
plot(fc, karate)
setwd("C:/Dev/complex_networks/lab_3/")
# Detekcja spolecznosci
library("igraph")
graph <- sample_gnm(n=30, m=30)
plot(graph, vertex.label=NA, vertex.size=18, vertex.label.cex = 1.3)
communities <- cluster_louvain(graph, weights = NULL)
# info zwrotne https://igraph.org/r/doc/communities.html
length(communities) # liczba społeczności
sizes(communities) # rozmiary społeczności
members <- membership(communities) #w tablicy dla każdego węzła przypisane jest community id
modularity(communities)
crossing(communities, graph) # łączność pomiędzy społecznościami
# Wizualizacja spolecznosci
compare(comm1, comm2, method = c("vi", "nmi", "split.join", "rand",
"adjusted.rand")) # porównanie
plot(communities, graph)
# Dendogram i podejscie hierarchiczne
karate <- make_graph("Zachary")
fc <- cluster_fast_greedy(karate)
plot_dendrogram(fc)
plot(fc, karate)
# Inne algorytmy
# Random walk
fc <- cluster_walktrap(graph, weights = E(graph)$weight, steps = x, merges = TRUE, modularity = TRUE, membership =
TRUE)
plot_dendrogram(fc)
plot(fc, karate)
# Eigenvector
fc <- cluster_leading_eigen(graph, steps = -1, weights = NULL, start = NULL, options = arpack_defaults, callback = NULL,
extra = NULL, env = parent.frame())
plot_dendrogram(fc)
plot(fc, karate)
# Betweenness krawędzi
fc <- cluster_edge_betweenness(graph, weights = E(graph)$weight, directed = TRUE, edge.betweenness = TRUE, merges
= TRUE, bridges = TRUE, modularity = TRUE, membership = TRUE)
plot_dendrogram(fc)
plot(fc, karate)
# Etykiety & voting
fc <- cluster_label_prop(graph, weights = NULL, initial = NULL, fixed = NULL)
plot(fc, karate)
# Greedy
fc <- cluster_fast_greedy(graph)
plot(fc, karate)
fc <- cluster_walktrap(graph, weights = E(graph)$weight, steps = 10, merges = TRUE, modularity = TRUE, membership =
TRUE)
plot_dendrogram(fc)
plot(fc, karate)
# Inne algorytmy
# Random walk
fc <- cluster_walktrap(graph, weights = E(graph)$weight, steps = 2, merges = TRUE, modularity = TRUE, membership =
TRUE)
plot_dendrogram(fc)
plot(fc, karate)
# Detekcja spolecznosci
library("igraph")
graph <- sample_smallworld(dim=2, size=10, nei=1, p=0.1)
plot(graph, vertex.size=6, vertex.label=NA, layout=layout_in_circle)
setwd("C:/Dev/complex_networks/lab_3/")
# Detekcja spolecznosci
library("igraph")
ba <- sample_pa(n=100, power=1, m=1, directed=F)
plot(ba, vertex.size=6, vertex.label=NA)
setwd("C:/Dev/complex_networks/lab_3/")
# Detekcja spolecznosci
library("igraph")
ba <- sample_pa(n=100, power=2, m=1, directed=F)
plot(ba, vertex.size=6, vertex.label=NA)
setwd("C:/Dev/complex_networks/lab_3/")
# Detekcja spolecznosci
library("igraph")
ba <- sample_pa(n=100, power=3, m=1, directed=F)
plot(ba, vertex.size=6, vertex.label=NA)
setwd("C:/Dev/complex_networks/lab_3/")
# Detekcja spolecznosci
library("igraph")
ba <- sample_pa(n=100, power=1, m=2, directed=F)
plot(ba, vertex.size=6, vertex.label=NA)
setwd("C:/Dev/complex_networks/lab_3/")
# Detekcja spolecznosci
library("igraph")
ba <- sample_pa(n=100, power=1, m=3, directed=F)
plot(ba, vertex.size=6, vertex.label=NA)
setwd("C:/Dev/complex_networks/lab_3/")
# Detekcja spolecznosci
library("igraph")
ba <- sample_pa(n=100, power=1, m=1, directed=F)
plot(ba, vertex.size=6, vertex.label=NA)
setwd("C:/Dev/complex_networks/lab_3/")
# Detekcja spolecznosci
library("igraph")
ba <- sample_pa(n=50, power=1, m=1, directed=F)
plot(ba, vertex.size=6, vertex.label=NA)
communities <- cluster_louvain(graph, weights = NULL)
# info zwrotne https://igraph.org/r/doc/communities.html
length(communities) # liczba społeczności
sizes(communities) # rozmiary społeczności
members <- membership(communities) #w tablicy dla każdego węzła przypisane jest community id
modularity(communities)
crossing(communities, graph) # łączność pomiędzy społecznościami
